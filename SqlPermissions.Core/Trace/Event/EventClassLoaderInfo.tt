<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="EventClass.ttinclude" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<#
	var g = new EventClassLoaderInfoGenerator();
	g.Run();
#>

<#+
class EventClassLoaderInfo : Template
{
	private EventClass _class;

	public EventClassLoaderInfo(EventClass cls)
	{
		_class = cls;
	}

	public override String TransformText()
	{
#>
using System;
using System.Data;
using System.Diagnostics.Contracts;
using SqlPermissions.Core.Utility;

namespace <#= _class.Namespace #>
{
	class <#= _class.ClassName #>LoaderInfo : EventClassLoaderInfoBase
	{
		public <#= _class.ClassName #>LoaderInfo(IDataRecord record)
		{
			Contract.Requires(null != record, "The record object can not be null.");

<#+		foreach (var m in _class.Members) { #>
			record.TryGetOrdinal("<#= m.MemberName #>", out <#= m.FieldName #>Ordinal);
<#+		} #>
			
		}
<#+		foreach (var m in _class.Members) { #>
		
		public Int32? <#= m.Name #>Ordinal
		{
			get { return <#= m.FieldName #>Ordinal; }
			// set { <#= m.FieldName #>Ordinal = value; }
		}
		private readonly Int32? <#= m.FieldName #>Ordinal;
<#+		} #>

	}
}
<#+
		return GenerationEnvironment.ToString();
	}
}

public class EventClassLoaderInfoGenerator : Generator
{
	protected override void RunCore()
	{
		var path = TransformationContext.Current.Host.ResolvePath("EventClassesGeneration.xml");
		foreach (var cls in ClassFactory.BuildClasses(path, "SqlPermissions.Core.Trace.Event"))
		{
			var ecli = new EventClassLoaderInfo(cls);
			ecli.RenderToFile(cls.ClassName + "LoaderInfo.g.cs");
		}
	}
}
#>